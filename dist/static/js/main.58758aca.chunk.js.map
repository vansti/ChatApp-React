{"version":3,"sources":["components/nav/SignedIn.js","store/actions/authActions.js","components/nav/SignedOut.js","components/nav/Navbar.js","components/dashboard/Dashboard.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/rootReducer.js","config/firebaseConfig.js","index.js"],"names":["SignedIn","handleAuth","e","preventDefault","_this","props","signOut","auth","this","react_default","a","createElement","className","href","onClick","NavLink","to","src","photoURL","alt","style","width","Component","connect","state","firebase","dispatch","getState","_ref2","getFirebase","then","type","SignedOut","signIn","_ref","provider","GoogleAuthProvider","addScope","signInWithPopup","catch","err","links","uid","nav_SignedIn","nav_SignedOut","Link","Dashboard","App","BrowserRouter","nav_Navbar","Switch","Route","path","component","Boolean","window","location","hostname","match","initState","authError","authReducer","arguments","length","undefined","console","log","Object","objectSpread","rootReducer","combineReducers","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","firestore","settings","timestampsInSnapshots","store","createStore","compose","applyMiddleware","thunk","withExtraArgument","getFirestore","reactReduxFirebase","firebaseConfig","attachAuthIsReady","reduxFirestore","firebaseAuthIsReady","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58758aca.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { signOut } from '../../store/actions/authActions'\r\n\r\nclass SignedIn extends Component  {\r\n\r\n  handleAuth = (e) => {\r\n    e.preventDefault()\r\n    this.props.signOut()\r\n  }\r\n  render(){\r\n    const { auth } = this.props;\r\n    return (\r\n      <div>\r\n        <ul className=\"right\">\r\n          <li><a href=\".\" onClick={this.handleAuth}>Log Out</a></li>\r\n          <li><NavLink to='/' className=\"btn btn-floating lighten-1\"><img className=\"responsive-img\" src={auth.photoURL} alt=\"\" style={{width:'40px'}}></img></NavLink></li>\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n  \r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return{\r\n    auth: state.firebase.auth\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    signOut: () => dispatch(signOut())\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignedIn)","export const signIn = () => {\r\n    return (dispatch, getState, {\r\n        getFirebase\r\n    }) => {\r\n        const firebase = getFirebase();\r\n        const provider = new firebase.auth.GoogleAuthProvider();\r\n        provider.addScope('https://www.googleapis.com/auth/plus.login');\r\n        firebase.auth().signInWithPopup(provider)\r\n            .then(() => {\r\n                dispatch({\r\n                    type: 'LOGIN_SUCCESS'\r\n                });\r\n            }).catch((err) => {\r\n                dispatch({\r\n                    type: 'LOGIN_ERROR',\r\n                    err\r\n                });\r\n            });\r\n\r\n    }\r\n}\r\n\r\nexport const signOut = () => {\r\n    return (dispatch, getState, {\r\n        getFirebase\r\n    }) => {\r\n        const firebase = getFirebase();\r\n\r\n        firebase.auth().signOut().then(() => {\r\n            dispatch({\r\n                type: 'SIGNOUT_SUCCESS'\r\n            })\r\n        });\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { signIn } from '../../store/actions/authActions'\r\n\r\nclass SignedOut extends Component {\r\n\r\n  handleAuth = (e) => {\r\n    e.preventDefault()\r\n    this.props.signIn()\r\n  }\r\n  render(){\r\n    return (\r\n      <div>\r\n        <ul className=\"right\">\r\n          <li><a href=\".\" onClick={this.handleAuth}>Login with Google</a> </li>\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n  \r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    signIn: () => dispatch(signIn())\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(SignedOut)","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport SignedIn from './SignedIn'\r\nimport SignedOut from './SignedOut'\r\nimport { connect } from 'react-redux'\r\n\r\nconst Navbar = (props) => {\r\n  const { auth } = props;\r\n  // console.log(auth);\r\n  const links = auth.uid ? <SignedIn /> : <SignedOut />;\r\n  return (\r\n    <nav className=\"nav-wrapper grey darken-3\">\r\n      <div className=\"container\">\r\n        <Link to='/' className=\"brand-logo\"><i className=\"material-icons\">chat_bubble</i>Chat App</Link>\r\n        {links}\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  // console.log(state)\r\n  return{\r\n    auth: state.firebase.auth\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Navbar)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nclass Dashboard extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"dashboard container\">\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Dashboard)","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport Navbar from './components/nav/Navbar'\nimport Dashboard from './components/dashboard/Dashboard'\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n            <Route path='/'component={Dashboard} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\r\n    authError: null\r\n}\r\n\r\nconst authReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case 'LOGIN_ERROR':\r\n            console.log('login error');\r\n            return {\r\n                ...state,\r\n                authError: 'Login failed'\r\n            }\r\n        case 'LOGIN_SUCCESS':\r\n            console.log('login success');\r\n            return {\r\n                authError: null\r\n            }\r\n        case 'SIGNOUT_SUCCESS':\r\n            console.log('signout success');\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default authReducer;","import authReducer from './authReducer'\r\nimport { combineReducers } from 'redux'\r\nimport { firebaseReducer } from 'react-redux-firebase'\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    firebase: firebaseReducer\r\n});\r\n\r\nexport default rootReducer\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\n// Replace this with your own config details\r\nvar config = {\r\n    apiKey: \"AIzaSyBMbFPF2-CfNZywfSpRu_AEdRyb_czGB_0\",\r\n    authDomain: \"dagk-da64a.firebaseapp.com\",\r\n    databaseURL: \"https://dagk-da64a.firebaseio.com\",\r\n    projectId: \"dagk-da64a\",\r\n    storageBucket: \"dagk-da64a.appspot.com\",\r\n    messagingSenderId: \"734095293560\"\r\n};\r\nfirebase.initializeApp(config);\r\nfirebase.firestore().settings({ timestampsInSnapshots: true });\r\n\r\nexport default firebase ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport rootReducer from './store/reducers/rootReducer';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk'\nimport { reduxFirestore, getFirestore } from 'redux-firestore';\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase';\nimport firebaseConfig from './config/firebaseConfig';\n\nconst store = createStore(rootReducer,\n compose(\n    applyMiddleware(thunk.withExtraArgument({getFirebase, getFirestore})),\n    reactReduxFirebase(firebaseConfig, {attachAuthIsReady: true}),  // redux binding for firebase\n    reduxFirestore(firebaseConfig) // redux bindings for firestore\n  )\n);\n\n\nstore.firebaseAuthIsReady.then(() => {\n  ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n  serviceWorker.unregister();\n});\n"],"sourceRoot":""}